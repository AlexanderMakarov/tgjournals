plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'org.graalvm.buildtools.native' version '0.11.1'
}

group = 'com.aleksandrmakarov'
version = '0.0.1-SNAPSHOT'
description = 'Journals TG bot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(project.hasProperty('javaVersion') ? project.property('javaVersion') as Integer : 21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.telegram:telegrambots-webhook:7.0.0'
	implementation 'org.telegram:telegrambots-client:7.0.0'
	implementation 'org.xerial:sqlite-jdbc:3.45.0.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Exclude commons-logging to avoid conflicts with spring-jcl
configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Ensure annotation processing works correctly
tasks.withType(JavaCompile) {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += ['-parameters']
}

// Spotless configuration for code formatting
spotless {
	java {
		googleJavaFormat('1.19.2')
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// GraalVM Native Image configuration
graalvmNative {
	binaries {
		main {
			buildArgs.add('--initialize-at-build-time=org.springframework')
			buildArgs.add('--initialize-at-build-time=org.telegram')
			buildArgs.add('--initialize-at-build-time=com.aleksandrmakarov.journals')
			buildArgs.add('--initialize-at-run-time=org.springframework.boot.autoconfigure')
			buildArgs.add('--initialize-at-run-time=org.springframework.context')
			// Spring Framework issue where VfsUtils is trying to detect JBoss VFS infrastructure at build time.
			buildArgs.add('--initialize-at-run-time=org.springframework.core.io.VfsUtils')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.config.TelegramBotConfig')
			// Jackson classes that were initialized at build time
			buildArgs.add('--initialize-at-run-time=com.fasterxml.jackson')
			// Logback classes that were initialized at build time
			buildArgs.add('--initialize-at-run-time=ch.qos.logback')
			buildArgs.add('--initialize-at-run-time=org.slf4j')
			buildArgs.add('--no-fallback')
			buildArgs.add('--enable-http')
			buildArgs.add('--enable-https')
			buildArgs.add('--enable-url-protocols=http,https')
			buildArgs.add('-H:+AddAllCharsets')
			buildArgs.add('-H:+IncludeAllLocales')
			buildArgs.add('-H:+ReportExceptionStackTraces')
			buildArgs.add('-H:+PrintClassInitialization')
			buildArgs.add('-H:TraceClassInitialization=true')
			// Build optimizations
			buildArgs.add('-H:+UnlockExperimentalVMOptions')
			buildArgs.add('-H:+UseStringDeduplication')
			buildArgs.add('-H:+RemoveSaturatedTypeFlows')
			buildArgs.add('-H:+ReportUnsupportedElementsAtRuntime')
		}
	}
}
