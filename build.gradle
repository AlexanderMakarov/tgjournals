plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.graalvm.buildtools.native' version '0.10.1'
	id 'jacoco'
}

group = 'com.aleksandrmakarov'
version = '0.0.1-SNAPSHOT'
description = 'Journals TG bot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(project.hasProperty('javaVersion') ? project.javaVersion : 21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.telegram:telegrambots-webhook:7.0.0'
	implementation 'org.telegram:telegrambots-client:7.0.0'
	implementation 'org.postgresql:postgresql:42.7.7'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Exclude commons-logging to avoid conflicts with spring-jcl
configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
}

// Add coverage report to test task.
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
	dependsOn = []
}

// Prevent bootRun task from being up-to-date ever.
tasks.named('bootRun') {
	outputs.upToDateWhen { false }
}

// Spotless configuration for code formatting
spotless {
	java {
		googleJavaFormat('1.19.2')
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// Setup Jacoco coverage report.
jacoco {
	toolVersion = '0.8.13'
}
tasks.named('jacocoTestReport') {
	dependsOn tasks.named('test')
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
}
tasks.register('printCoverage') {
	dependsOn tasks.named('jacocoTestReport')
	doLast {
		def reportFile = file("build/reports/jacoco/test/jacocoTestReport.xml")
		if (!reportFile.exists()) {
			println "coverage: 0.00% of lines"
			return
		}
		def text = reportFile.getText('UTF-8')
		def pairs = (text =~ /<counter\b[^>]*type="LINE"[^>]*missed="(\d+)"[^>]*covered="(\d+)"[^>]*\/>/)
		if (pairs.find()) {
			pairs.reset()
			def missedTotal = BigDecimal.ZERO
			def coveredTotal = BigDecimal.ZERO
			while (pairs.find()) {
				missedTotal = missedTotal.add(new BigDecimal(pairs.group(1)))
				coveredTotal = coveredTotal.add(new BigDecimal(pairs.group(2)))
			}
			def total = missedTotal.add(coveredTotal)
			def percentBd = (total.compareTo(BigDecimal.ZERO) == 0)
				? BigDecimal.ZERO
				: coveredTotal.multiply(new BigDecimal('100')).divide(total, 2, java.math.RoundingMode.HALF_UP)
			println String.format("coverage: %.2f%% of lines", percentBd.doubleValue())
		} else {
			println "coverage: 0.00% of lines"
		}
	}
}

// Task to generate native image hints using the GraalVM tracing agent
task generateNativeHints(type: JavaExec) {
	description = 'Generate native image hints using GraalVM tracing agent'
	group = 'native'

	dependsOn 'bootJar'

	classpath = files(tasks.bootJar.archiveFile)
	mainClass = 'org.springframework.boot.loader.launch.JarLauncher'

	def metadataDir = file("src/main/resources/META-INF/native-image/com.aleksandrmakarov/tg-journals")
	metadataDir.mkdirs()

	// Set LD_LIBRARY_PATH to include GraalVM lib directory for native-image-agent
	def javaHome = System.getProperty("java.home")
	environment "LD_LIBRARY_PATH", "${javaHome}/lib"

	jvmArgs = [
		"-agentlib:native-image-agent=config-merge-dir=${metadataDir}"
	]

	// Set a timeout so the app doesn't run forever
	doFirst {
		println "Starting application with tracing agent..."
		println "The app will run for 30 seconds. Please trigger your API endpoints during this time."
		println "Press Ctrl+C to stop earlier."
	}

	doLast {
		println ""
		println "Native image hints generated/updated in: ${metadataDir}"
		println "Review the generated files and rebuild the native image."
	}
}

// Make nativeCompile depend on hint generation in development
if (System.getenv('AUTO_GENERATE_HINTS') == 'true') {
	tasks.named('processAot') {
		dependsOn 'generateNativeHints'
	}
}

// GraalVM Native Image configuration
graalvmNative {
	binaries {
		main {
			// Core framework initialization - package-level approach
			buildArgs.add('--initialize-at-build-time=org.springframework')
			buildArgs.add('--initialize-at-build-time=org.telegram')
			buildArgs.add('--initialize-at-build-time=com.aleksandrmakarov.journals')

			// Based on build.gradle.analysis-for-native-image: Only 2 classes need build-time initialization
			buildArgs.add('--initialize-at-build-time=org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog')

			// Logging packages - package-level approach for maintainability
			buildArgs.add('--initialize-at-build-time=ch.qos.logback')
			buildArgs.add('--initialize-at-build-time=org.apache.commons.logging')
			buildArgs.add('--initialize-at-build-time=org.slf4j')

			// Jackson classes - package-level approach
			buildArgs.add('--initialize-at-build-time=com.fasterxml.jackson')

			// YAML/SnakeYAML classes for Swagger/OpenAPI
			buildArgs.add('--initialize-at-build-time=org.yaml.snakeyaml')

			// PostgreSQL classes
			buildArgs.add('--initialize-at-build-time=org.postgresql')

			// Spring Boot classes that need build-time initialization
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.json')
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.SpringApplicationShutdownHook')
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.SpringApplicationShutdownHook$ApplicationContextClosedListener')

			// Runtime initialization for classes that need it
			buildArgs.add('--initialize-at-run-time=org.springframework.boot.autoconfigure')
			buildArgs.add('--initialize-at-run-time=org.springframework.core.io.VfsUtils')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.config.TelegramBotConfig')

			// JDK dynamic proxy support for @Transactional services
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.UserService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.SessionService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.JournalService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.repository.UserRepository')

			// Spring AOP support (JDK dynamic proxies)
			buildArgs.add('--initialize-at-run-time=org.springframework.aop')

			// JDK dynamic proxy support - using reflection configuration instead of runtime initialization

			// Native image configuration
			buildArgs.add('--no-fallback')
			buildArgs.add('--enable-http')
			buildArgs.add('--enable-https')
			buildArgs.add('--enable-url-protocols=http,https')
			buildArgs.add('-H:+AddAllCharsets')
			buildArgs.add('-H:+ReportExceptionStackTraces')

			// Build optimizations
			buildArgs.add('-H:+UnlockExperimentalVMOptions')
			buildArgs.add('-H:+RemoveSaturatedTypeFlows')
			buildArgs.add('-H:+IncludeAllLocales')

			// Enable native access for JNI libraries
			if (System.getenv('STATIC_BUILD') == 'true') {
				buildArgs.add('--enable-native-access=ALL-UNNAMED')
			}
		}
	}
}
