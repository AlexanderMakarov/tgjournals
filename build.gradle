plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.graalvm.buildtools.native' version '0.10.1'
}

group = 'com.aleksandrmakarov'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(project.hasProperty('javaVersion') ? project.javaVersion : 21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.telegram:telegrambots-webhook:7.0.0'
	implementation 'org.telegram:telegrambots-client:7.0.0'
	implementation 'org.xerial:sqlite-jdbc:3.45.0.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Exclude commons-logging to avoid conflicts with spring-jcl
configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Task to generate native image hints using the GraalVM tracing agent
task generateNativeHints(type: Exec) {
	description = 'Generate native image hints using GraalVM tracing agent'
	group = 'native'
	
	// First build the application
	dependsOn 'bootJar'
	
	// Run the hint generation script
	commandLine './generate-native-hints.sh'
	
	doLast {
		println "Native image hints generated successfully!"
		println "Hints are available in: src/main/resources/META-INF/native-image/com.aleksandrmakarov/tg-journals/"
	}
}

// GraalVM Native Image configuration
graalvmNative {
	binaries {
		main {
			// Core framework initialization - package-level approach
			buildArgs.add('--initialize-at-build-time=org.springframework')
			buildArgs.add('--initialize-at-build-time=org.telegram')
			buildArgs.add('--initialize-at-build-time=com.aleksandrmakarov.journals')
			
			// Based on build.gradle.analysis-for-native-image: Only 2 classes need build-time initialization
			buildArgs.add('--initialize-at-build-time=org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog')
			
			// Logging packages - package-level approach for maintainability
			buildArgs.add('--initialize-at-build-time=ch.qos.logback')
			buildArgs.add('--initialize-at-build-time=org.apache.commons.logging')
			buildArgs.add('--initialize-at-build-time=org.slf4j')
			
			// Jackson classes - package-level approach
			buildArgs.add('--initialize-at-build-time=com.fasterxml.jackson')
			
			// YAML/SnakeYAML classes for Swagger/OpenAPI
			buildArgs.add('--initialize-at-build-time=org.yaml.snakeyaml')
			
			// SQLite classes
			buildArgs.add('--initialize-at-build-time=org.sqlite')
			
			// Spring Boot classes that need build-time initialization
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.json')
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.SpringApplicationShutdownHook')
			buildArgs.add('--initialize-at-build-time=org.springframework.boot.SpringApplicationShutdownHook$ApplicationContextClosedListener')
			
			// Runtime initialization for classes that need it
			buildArgs.add('--initialize-at-run-time=org.springframework.boot.autoconfigure')
			buildArgs.add('--initialize-at-run-time=org.springframework.context')
			buildArgs.add('--initialize-at-run-time=org.springframework.core.io.VfsUtils')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.config.TelegramBotConfig')
			
			// JDK dynamic proxy support for @Transactional services
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.UserService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.SessionService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.service.JournalService')
			buildArgs.add('--initialize-at-run-time=com.aleksandrmakarov.journals.repository.UserRepository')
			
			// Spring AOP support (JDK dynamic proxies)
			buildArgs.add('--initialize-at-run-time=org.springframework.aop')
			
			// JDK dynamic proxy support - using reflection configuration instead of runtime initialization
			
			// Native image configuration
			buildArgs.add('--no-fallback')
			buildArgs.add('--enable-http')
			buildArgs.add('--enable-https')
			buildArgs.add('--enable-url-protocols=http,https')
			buildArgs.add('-H:+AddAllCharsets')
			buildArgs.add('-H:+ReportExceptionStackTraces')
			
			// Build optimizations
			buildArgs.add('-H:+UnlockExperimentalVMOptions')
			buildArgs.add('-H:+RemoveSaturatedTypeFlows')
			buildArgs.add('-H:+IncludeAllLocales')
		}
	}
}
